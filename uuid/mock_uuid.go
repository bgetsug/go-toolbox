// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/satori/go.uuid (interfaces: Generator)

// Package mocks is a generated GoMock package.
package uuid

import (
	gomock "github.com/golang/mock/gomock"
	go_uuid "github.com/satori/go.uuid"
	reflect "reflect"
)

// MockGenerator is a mock of Generator interface
type MockGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockGeneratorMockRecorder
}

// MockGeneratorMockRecorder is the mock recorder for MockGenerator
type MockGeneratorMockRecorder struct {
	mock *MockGenerator
}

// NewMockGenerator creates a new mock instance
func NewMockGenerator(ctrl *gomock.Controller) *MockGenerator {
	mock := &MockGenerator{ctrl: ctrl}
	mock.recorder = &MockGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGenerator) EXPECT() *MockGeneratorMockRecorder {
	return m.recorder
}

// NewV1 mocks base method
func (m *MockGenerator) NewV1() go_uuid.UUID {
	ret := m.ctrl.Call(m, "NewV1")
	ret0, _ := ret[0].(go_uuid.UUID)
	return ret0
}

// NewV1 indicates an expected call of NewV1
func (mr *MockGeneratorMockRecorder) NewV1() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewV1", reflect.TypeOf((*MockGenerator)(nil).NewV1))
}

// NewV2 mocks base method
func (m *MockGenerator) NewV2(arg0 byte) go_uuid.UUID {
	ret := m.ctrl.Call(m, "NewV2", arg0)
	ret0, _ := ret[0].(go_uuid.UUID)
	return ret0
}

// NewV2 indicates an expected call of NewV2
func (mr *MockGeneratorMockRecorder) NewV2(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewV2", reflect.TypeOf((*MockGenerator)(nil).NewV2), arg0)
}

// NewV3 mocks base method
func (m *MockGenerator) NewV3(arg0 go_uuid.UUID, arg1 string) go_uuid.UUID {
	ret := m.ctrl.Call(m, "NewV3", arg0, arg1)
	ret0, _ := ret[0].(go_uuid.UUID)
	return ret0
}

// NewV3 indicates an expected call of NewV3
func (mr *MockGeneratorMockRecorder) NewV3(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewV3", reflect.TypeOf((*MockGenerator)(nil).NewV3), arg0, arg1)
}

// NewV4 mocks base method
func (m *MockGenerator) NewV4() go_uuid.UUID {
	ret := m.ctrl.Call(m, "NewV4")
	ret0, _ := ret[0].(go_uuid.UUID)
	return ret0
}

// NewV4 indicates an expected call of NewV4
func (mr *MockGeneratorMockRecorder) NewV4() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewV4", reflect.TypeOf((*MockGenerator)(nil).NewV4))
}

// NewV5 mocks base method
func (m *MockGenerator) NewV5(arg0 go_uuid.UUID, arg1 string) go_uuid.UUID {
	ret := m.ctrl.Call(m, "NewV5", arg0, arg1)
	ret0, _ := ret[0].(go_uuid.UUID)
	return ret0
}

// NewV5 indicates an expected call of NewV5
func (mr *MockGeneratorMockRecorder) NewV5(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewV5", reflect.TypeOf((*MockGenerator)(nil).NewV5), arg0, arg1)
}
